<?php
## LICENSE AFL3.0 # Copyright (c) 2015-2016 Nicola Bombaci ##
$debug=false;$swam=new SWcompile($debug);class SWcompile{private $workit;private $debug;function __construct($debug){$this->workit=new workit($debug);;}function parse($input){$this->workit->tokenize($input);try{$this->debug=new debug($this->workit);if($this->debug->syntax_checking()){return false;}else{$parser=new swam($this->workit);$parser->read();return $parser->printer;}}catch(Exception $e){echo "Error :".$e;}}}class workit{public $line=array();private $token="\r\n";public $lenght;public $debug_mode=null;function __construct($debug){$this->debug_mode=$debug;}public function get_string_between($string,$start,$end){$ini=strpos($string,$start);$ini+=strlen($start);$len=strpos($string,$end,$ini)- $ini;return substr($string,$ini,$len);}public function delete_first_tag($string,$start){$ini=strpos($string,$start);$ini+=strlen($start);return substr($string,$ini);}public function tokenize($string){$debug_mode=$this->debug_mode;$a=1;$this->line[0][1]=0;$tok=strtok($string,$this->token);while($tok){$count=null;if($debug_mode)echo "<b>token '".$tok."'</b><br>";$this->line[$a-1][0]=$tok;if($debug_mode)echo $this->line[$a-1][1]." Word = ".$this->line[$a-1][0]." <br>";$tok_new=strtok($this->token);$tok_new=preg_replace('/[\\t]/','',$tok_new,-1,$count);$string=$this->delete_first_tag($string,$tok);$this->line[$a][1]=$count;$tok=$tok_new;$a++;}if($debug_mode)echo "<hr>";$this->lenght=count($this->line);for($i=0;$i<($this->lenght - 1);$i++){$string=$this->line[$i][0];$count=null;$returnValue=preg_replace('/(\\/\\/+)/i','',$string,-1,$count);if($count>=1){array_splice($this->line,$i,1);$this->lenght=$this->lenght - 1;}}}}class swam{private $next=0;private $workit;public $printer;public $debug_mode=null;function __construct($workit){$this->workit=$workit;$this->debug_mode=$workit->debug_mode;}function start(){while(($this->next)<($this->workit->lenght-1)){if($this->check($this->workit->line[$this->next][0],$this->next));}}public function read(){$lenght=$this->workit->lenght;$line=$this->workit->line;$debug_mode=$this->debug_mode;for($i=0;$i<$lenght-1;$i++){$line[$i][0]=str_replace("\n","",$line[$i][0]);$this->workit->line[$i][0]=" ".$line[$i][0]." ";if($debug_mode)echo "$i - Setting Array '".$this->workit->line[$i][0]."'<br>";}if($debug_mode)echo "<hr>";$this->start();}private function check($row,$i){if($this->check_on($row,$i))return $this->on_read($i);else if($this->check_in($row,$i))return $this->in_read($i);else return 999;}private function check_on($row,$i){$debug_mode=$this->debug_mode;$check=$this->workit->get_string_between($row," "," ");if($debug_mode){echo "Control ON <br>";echo "Check Line '".$row."'<br>";echo "Check Value '".$check."'<br>";}if($check=="on"){$this->workit->line[$i][0]=$this->workit->delete_first_tag($row," on");if($debug_mode)echo "<b>Control Passed</b><br><hr>";return 1;}else{if($debug_mode)echo "<b>Control Not Passed</b><br><hr>";return 0;}}private function check_in($row,$i){$debug_mode=$this->debug_mode;$check=$this->workit->get_string_between($row," "," ");if($debug_mode){echo "Control IN <br>";echo "Check Line '".$row."'<br>";echo "Check Value '".$check."'<br>";}if($check=="in"){$this->workit->line[$i][0]=$this->workit->delete_first_tag($row," in");if($debug_mode)echo "<b>Control Passed</b><br><hr>";return 1;}else{if($debug_mode)echo "<b>Control Not Passed</b><br><hr>";return 0;}}private function on_read($i){$lenght=$this->workit->lenght;$line=$this->workit->line;$debug_mode=$this->debug_mode;$current=$this->workit->line[$i][0];$spoiler=$this->workit->get_string_between($current," "," ");$this->printer.="<";$this->printer.=$spoiler;if($debug_mode)echo "<b>Opening $spoiler</b><br>";$this->workit->line[$i][0]=$this->workit->delete_first_tag($current," ".$spoiler);$cur_pos=$this->workit->line[$i][1];$general_line=$this->workit_to_string($i);$this->auto_read($general_line);$this->printer.=">";$this->next=$i+1;if($debug_mode){echo "Next Value: ".$this->next;echo "<br>Index Value: $i<br>";}if(($this->next)<($lenght-1)){while(($line[$this->next][1])>$cur_pos){if($debug_mode)echo "Major Values of <b>$spoiler</b><br><hr>";if($this->check($this->workit->line[$this->next][0],$this->next));else if($debug_mode)echo "<b>Reading on line $this->next</b><br>";}if(($line[$this->next][1])<=$cur_pos){if($debug_mode)echo "Equal or Min Values - <b>Closing $spoiler</b><br><hr>";$this->printer.="</$spoiler>";return 0;}}}private function in_read($i){$lenght=$this->workit->lenght;$line=$this->workit->line;$debug_mode=$this->debug_mode;$current=$this->workit->line[$i][0];$spoiler=$this->workit->get_string_between($current," "," ");$this->printer.="<";$this->printer.=$spoiler;if($debug_mode)echo "<b>Opening $spoiler</b><br>";$this->workit->line[$i][0]=$this->workit->delete_first_tag($current," ".$spoiler);$cur_pos=$this->workit->line[$i][1];$general_line=$this->workit_to_string($i);$this->auto_read($general_line);$this->printer.=">";$this->next=$i+1;if($debug_mode){echo "Next Value: ".$this->next;echo "<br>Index Value: $i<br>";}if(($this->next)<($lenght-1)){while(((($line[$this->next][1])- $cur_pos)==1)){if($debug_mode)echo "Next line is a content of <b>$spoiler</b><br><hr>";$this->content_read($this->next);if($debug_mode)echo "<b>Reading content on line $this->next</b><br>";$this->next++;}if((($line[$this->next][1])<=$cur_pos)||((($line[$this->next][1])- $cur_pos)>1)){if($debug_mode)echo "Out of <b>$spoiler</b> tag - <b>Closing $spoiler</b><br><hr>";$this->printer.="</$spoiler>";return 1;}}}private function content_read($i){$current=$this->workit->line[$i][0];$current=trim($current," ");if($current=='');else $this->special_str($current);return 0;}private function auto_read($string){$element=strtok($string," ");while($element!==false){$this->fast_attributes($element);$element=strtok(" ");}return 1;}private function workit_to_string($row){$line=$this->workit->line;$string=$line[$row][0];return $string;}private function fast_attributes($string){$sign=$string{0};switch($sign){case '$':$this->printer=$this->printer."'.".$string.".'";break;case '#':$string=substr($string,1);$this->printer=$this->printer." id=\"".$string."\"";break;case '@':$string=substr($string,1);$this->printer=$this->printer." class=\"".$string."\"";break;default:if(strlen($string)>1)$this->printer=$this->printer." ".$string;else $this->printer=$this->printer.$string;break;}return 1;}private function special_str($string){$tok=strtok($string," ");while($tok!==false){$spec=$tok{0};$tag=substr($tok,1,strlen($tok)- 1);switch($spec){case '|':$this->printer=$this->printer."<".$tag;$tok=strtok(" ");while($tok{0}!="["){$this->fast_attributes($tok);$tok=strtok(" ");}if($tok{0}=="["&&$tok{strlen($tok)- 1}=="]"){$this->printer=$this->printer.">".substr($tok,1,strlen($tok)- 2);}else{$this->printer=$this->printer.">".substr($tok,1,strlen($tok)- 1)." ";$tok=strtok(" ");while($tok{strlen($tok)- 1}!="]"){$this->fast_attributes($tok);$tok=strtok(" ");}$this->printer=$this->printer.substr($tok,0,strlen($tok)- 1);}$this->printer=$this->printer." </".$tag.">";break;default:$this->printer=$this->printer.$tok." ";break;}$tok=strtok(" ");}$this->printer=substr($this->printer,0,strlen($this->printer));return 0;}}class debug{private $workit;private $pos_out=999;function __construct($workit){$this->workit=$workit;}function syntax_checking(){$lenght=$this->workit->lenght;$line=$this->workit->line;for($i=0;$i<$lenght-1;$i++){if(($line[$i+1][1]-$line[$i][1])>1){echo "<b>Error</b> in your <b>syntax</b> check on line <b>".($i+2)."</b><br>";return 1;}if(($i>$this->pos_out)&&($line[$i][1]<=1)){echo "<b>Error</b> out of <b>body</b> check on line <b>".($i+1)."</b><br>";return 1;}}}}
